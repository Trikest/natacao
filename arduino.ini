
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecureBearSSL.h>

// Substitua com suas credenciais de Wi-Fi
const char* ssid = "NOME_WIFI";
const char* password = "SENHA_DO_WI-FI";
const char* supabaseUrl = "URL_API";  // Substitua com a URL da sua API
const char* supabaseKey = "CHAVE_API";  // Substitua com sua chave de API (anon key)



// Pino e vari치veis do sensor piezoel칠trico
const int piezoAnalogPin = A0;   // Pino anal칩gico (A0)
int limiteToque = 30;           // Limite para o valor anal칩gico

unsigned long tempoInicio = 0;
unsigned long tempoFinal = 0;
bool cronometroRodando = false;
int idAtleta = 12; // Defina o ID do atleta (pode ser din칙mico, se necess치rio)

WiFiClientSecure client;
HTTPClient https;

void setup() {
  Serial.begin(115200);

  // Conectar ao Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Conectando ao WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi conectado!");

  tempoInicio = millis();  // Iniciar o cron칪metro
  cronometroRodando = true;
}

void loop() {
  int valorAnalogico = analogRead(piezoAnalogPin);   // L칡 o valor anal칩gico

  Serial.print("Anal칩gico: ");
  Serial.println(valorAnalogico);

  // Detecta um toque no sensor (se o valor anal칩gico for maior que o limite)
  if (valorAnalogico > limiteToque && cronometroRodando) {
    tempoFinal = millis();  
    unsigned long tempoDecorrido = tempoFinal - tempoInicio;  // Calcula o tempo total
    
    Serial.print("游댠 Toque detectado! Tempo total: ");
    Serial.print(tempoDecorrido / 1000.0);
    Serial.println(" segundos 游댠");

    enviarDados(idAtleta, tempoDecorrido / 1000.0);  // Envia o id e o tempo via HTTPS
    cronometroRodando = false;
  }

  // Delay maior para evitar leituras r치pidas demais
  //delay(1000);  // 5 segundos de delay
}

// Fun칞칚o para enviar os dados via HTTPS POST para o Supabase
void enviarDados(int atletaId, float tempo) {
  if (WiFi.status() == WL_CONNECTED) {
    std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);

    // Ignorar a valida칞칚o do certificado SSL (apenas para fins de teste)
    client->setInsecure();

    // Inicializar o HTTPClient
    https.begin(*client, supabaseUrl);

    // Cabe칞alhos
    https.addHeader("Content-Type", "application/json");
    https.addHeader("apikey", supabaseKey);
    https.addHeader("Authorization", "Bearer " + String(supabaseKey));

    // Dados a serem enviados (id do atleta e tempo)
    String postData = "{\"id\": " + String(atletaId) + ", \"tempo\": \"" + String(tempo) + "\"}";

    // Enviar a requisi칞칚o POST
    int httpCode = https.POST(postData);

    // Verificar o c칩digo de resposta HTTP
    if (httpCode > 0) {
      Serial.printf("[HTTPS] POST... c칩digo: %d\n", httpCode);
      if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_CREATED) {
        String payload = https.getString();  // A resposta do servidor
        Serial.println(payload);  // Exibe a resposta no monitor serial
      }
    } else {
      Serial.printf("[HTTPS] POST falhou, erro: %s\n", https.errorToString(httpCode).c_str());
    }

    // Finaliza a comunica칞칚o HTTPS
    https.end();
  } else {
    Serial.println("Erro: Wi-Fi desconectado!");
  }
}
